
def myRK4(ds, t_span, s0):
    # put your code here
    
    return [t, s]
T = [tSpan]; 
h=T(2)-T(1);
N = length(T);
M = length(S0);
s = ones(N,M);
s[1,:] = s0;
for i = 1:N-1;
    k1 = dS(T(i),S(i,:));
    k2 = dS(T(i)+h/2,S(i,:) + k1*h/2);
    k3 = dS(T(i)+h/2,S(i,:) + k2*h/2);
    k4 = dS(T(i)+h,S(i,:) + k3*h);
    phi = (k1+2*k2+2*k3+k4)/6;
    S(i+1,:) = S(i,:) + phi*h;
f = lambda t, s: np.sin(np.exp(s))/(t+1)
t_span = np.linspace(0, 2*np.pi, 10)
s0 = 0

plt.figure(figsize = (10, 8))

# Runge-Kutta method
t, s = myRK4(f, t_span, s0)
plt.plot(t, s, 'r', label='RK4')

# Python solver
sol = solve_ivp(f, [0, 2*np.pi], [s0], t_eval=t)
plt.plot(sol.t, sol.y[0], \
         'b--', label='Python Solver')

plt.xlabel('t')
plt.ylabel('f(t)')
plt.grid()
plt.legend(loc=2)
plt.show()
